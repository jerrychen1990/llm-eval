{"question": "当采用分块查找时，数据的组织方式为____", "answer": "B", "options": {"A": "数据分成若干块， 每块内数据有序", "B": "数据分成若干块， 每块内数据不必有序， 但块间必须有序， 每块内最大（ 或最小） 的数据组成索引块", "C": "数据分成若干块， 每块内数据有序， 但块间必须有序， 每块内最大（ 或最小） 的数据组成索引块", "D": "数据分成若干块， 每块（ 除最后一块外） 中数据个数需相同"}, "label": "ceval"}
{"question": "实现一个银行系统，包括存钱、取钱、转账等多项业务，最恰当的资源组合方式是____", "answer": "C", "options": {"A": "继承", "B": "重载", "C": "组合", "D": "实例化"}, "label": "ceval"}
{"question": "#include<iostream.h>\nclass date\n{\nprivate:\nint day,month,year;\npublic:\ndate(){}\ndate(int x,int y,int z){day=x;month=y,year=z;}\nvoid set(){day=1;month=10;year=2002;}\nvoid display(){cout<<day<<\"/\"<<month<<\"/\"<<year<<\"\";}\n};\nvoid main()\n{\ndate day1;\ndate day2(10,10,2002);\nday1.set();\nday1.display();\nday2.display();\n}\n上面C++程序运行的结果是____。", "answer": "B", "options": {"A": "10/10/2002 1/10/2002", "B": "1/10/2002 10/10/2002", "C": "10/10/2002 10/10/2002", "D": "1/10/2002 1/10/2002"}, "label": "ceval"}
{"question": "假定A是一个类的名字，下面四个语句总共会引发类A构造函数的调用多少次____\n①A *p=newA;\n②A p2[10];\n③A p3;\n④A *p4[10];", "answer": "B", "options": {"A": "11", "B": "12", "C": "21", "D": "22"}, "label": "ceval"}
{"question": "有以下程序代码\n#include<iostream>\nusing namespace std;\nclass integer{\npublic:\ninteger(int value=0):value(value){}\ninteger operator+(integer itg){\nreturn value+=itg.value;\n}\nfriend ostream&operator<<(ostream&os,integer&it){\nreturn os<<it.value;\n}\nprivate:\nint value;\n};\nint main()\n{\ninteger i;\ninteger ii;\nii=2+i;\ncout<<\"i=\"<<i<<\",\";\ncout<<\"ii=\"<<ii<<endl;\nreturn 0;\n}\n编译情况或运行时输出是____", "answer": "D", "options": {"A": "i=0 ,ii=2", "B": "i=2 ,ii=2", "C": "i=0 ,ii=0", "D": "编译错误"}, "label": "ceval"}
{"question": "在以下各种查找方法中，平均查找时间与结点个数无关的查找方法是____", "answer": "C", "options": {"A": "顺序查找", "B": "折半查找", "C": "哈希查找", "D": "分块查找"}, "label": "ceval"}
{"question": "读下面C++程序：\n#include<iostream.h>\nclass vehicle{\nprotected:\nint wheels;\npublic:\nvehicle(int in_wheels=4){wheels=in_wheels;}\nint get_wheels(){return wheels;}\n};\nvoid main()\n{\nvehicle unicyclel;\nvehicle unicycle2(3);\ncout<<\"Theunickele1has\"<<unicyclel.get_wheels()<<\"wheel.\\n\";\ncout<<\"Theunickele2has\"<<unicycle2.get_wheels()<<\"wheel.\\n\";\n}\n编译后输出结果为____。", "answer": "C", "options": {"A": "The unicycle1 has 0 wheel.\nThe unicycle2 has 3 wheel.", "B": "The unicycle1 has 4 wheel.\nThe unicycle2 has 4 wheel.", "C": "The unicycle1 has 4 wheel.\nThe unicycle2 has 3 wheel.", "D": "The unicycle1 has 0 wheel.\nThe unicycle2 has 4 wheel."}, "label": "ceval"}
{"question": "以下说法正确的是____", "answer": "B", "options": {"A": "在const成员函数中不可以使用this指针；", "B": "在static成员函数中不可以使用this 指针；", "C": "抽象类的成员函数都是纯虚函数；", "D": "抽象类的派生类必须实现抽象类中的纯虚函数。"}, "label": "ceval"}
{"question": "一个n个顶点的连通无向图，其边的个数至少为____", "answer": "A", "options": {"A": "n-1", "B": "n", "C": "n+1", "D": "nlogn"}, "label": "ceval"}
{"question": "在C++程序中出现____情况时，将引发一个异常。", "answer": "C", "options": {"A": "在 main 函数的结尾少了一个大括号", "B": "for 循环语法错误", "C": "被零除或数组溢出", "D": "数组没有被赋满值"}, "label": "ceval"}
{"question": "线性表若采用链式存储结构时，要求内存中可用存储单元的地址____。", "answer": "D", "options": {"A": "必须是连续的", "B": "部分地址必须是连续的", "C": "一定是不连续的", "D": "连续不连续都可以"}, "label": "ceval"}
{"question": "在类中说明的友元函数时____", "answer": "D", "options": {"A": "必须声明在私有成员部分", "B": "必须声明在共有成员部分", "C": "必须声明在类开始处", "D": "可以声明在类中任何地方"}, "label": "ceval"}
{"question": "对有14个元素的有序表A[1..14]作二分查找，查找元素A[6]时的被比较元素依次为____", "answer": "D", "options": {"A": "A[l], A[2], A[3], A[4]", "B": "A[l], A[14], A[7], A[4]", "C": "A[7], A[5], A[3], A[6]", "D": "A[7], A[3], A[5], A[6]"}, "label": "ceval"}
{"question": "下列概念____体现了面向对象的多态性。", "answer": "B", "options": {"A": "虚基类", "B": "虚函数", "C": "对象容器", "D": "封装"}, "label": "ceval"}
{"question": "若有定义char s[]={'1','2','3','0','0','4','5'};则cout<<s的结果为____", "answer": "C", "options": {"A": "1230045", "B": "12300", "C": "1230", "D": "123"}, "label": "ceval"}
{"question": "在C++中，数据封装要解决的问题是____。", "answer": "D", "options": {"A": "数据规范化排列", "B": "数据高速转换", "C": "避免数据丢失", "D": "保证数据完整性"}, "label": "ceval"}
{"question": "在顺序表（长度为127）中插入一个元素平均要移动____个元素。", "answer": "B", "options": {"A": "8", "B": "63.5", "C": "63", "D": "7"}, "label": "ceval"}
{"question": "关于左值引用，下列用法或叙述不正确的是____", "answer": "A", "options": {"A": "引用可以先定义，再赋值；", "B": "引用可以作为函数参数；", "C": "函数可以返回引用；", "D": "引用是另一个有名字变量的别名。"}, "label": "ceval"}
{"question": "现今的软件或是操作系统往往都有32位和64位的不同的版本，主要的区别就是32位的应用程序中，使用32个二进制位（即4字节）来表示内存地址，64位软件则是用64个二进制位表示内存地址。于是，当我们在将一个程序编译为64位的程序时，有下列语句\ncout<<sizeof(int)<<\"\"<<sizeof(int*)<<\"\";\ncout<<sizeof(double)<<\"\"<<sizeof(double*)<<endl;\n其输出会是____;", "answer": "C", "options": {"A": "4 4 8 8", "B": "4 4 8 4", "C": "4 8 8 8", "D": "4 8 4 8"}, "label": "ceval"}
{"question": "下述哪一条是顺序存储结构的优点？____", "answer": "A", "options": {"A": "存储密度大", "B": "插入运算方便", "C": "删除运算方便", "D": "可方便地用于各种逻辑结构的存储表示"}, "label": "ceval"}
{"question": "将一棵有100个结点的完全二叉树从根这一层开始，每一层上从左到右依次对结点进行编号，根结点的编号为1，则编号为49的结点的左孩子编号为____。", "answer": "A", "options": {"A": "98", "B": "99", "C": "50", "D": "48"}, "label": "ceval"}
{"question": "下面哪种数据结构最适合用于创建一个优先级队列？____", "answer": "D", "options": {"A": "栈", "B": "双向链表", "C": "单向链表", "D": "堆"}, "label": "ceval"}
{"question": "关于多态性，下列说法错误的是____", "answer": "B", "options": {"A": "C++语言的多态性分为编译时的多态性和运行时的多态性；", "B": "运行时的多态性可通过虚函数和函数重载实现；", "C": "编译时的多态性可通过模板实现；", "D": "实现运行时多态性的机制称为动态多态性。"}, "label": "ceval"}
{"question": "关于构造函数，下列说法错误的是____", "answer": "A", "options": {"A": "构造函数必须指定类型说明；", "B": "构造函数的函数名与类名相同；", "C": "构造函数可以设置缺省参数；", "D": "构造函数可以重载。"}, "label": "ceval"}
{"question": "对于栈操作数据的原则是____。", "answer": "B", "options": {"A": "先进先出", "B": "后进先出", "C": "后进后出", "D": "不分顺序"}, "label": "ceval"}
{"question": "设栈S和队Q的初始状态均为空，元素abcdef依次通过栈S，一个元素出栈后即进队Q，若6个元素出栈的序列是cefdba，则栈S的容量至少应该是____", "answer": "B", "options": {"A": "6", "B": "4", "C": "3", "D": "2"}, "label": "ceval"}
{"question": "下面关于模版说法正确的是____。", "answer": "A", "options": {"A": "类模版提供了一种对类中类型进行参数化的方法; 在实例化模版类时，实际的数据类型会代替与类成员或方法相关联的类型参数", "B": "类模版中必须包含类成员与类方法", "C": "不可以用自定义的数据类型实例化一个模版类", "D": "类模版中类方法的参数必须用占位符替代，而不能使用实际数据类型"}, "label": "ceval"}
{"question": "现有一棵无重复关键字的AVL树，对其进行中序遍历可得到一个降序序列。下列关于该AVL树的叙述中，正确的是：____", "answer": "D", "options": {"A": "根结点的度一定为 2", "B": "树中最小元素一定是叶结点", "C": "最后插入的元素一定是叶结点", "D": "树中最大元素一定是无左子树"}, "label": "ceval"}
{"question": "计算算法的时间复杂度是属于一种____的方法。", "answer": "B", "options": {"A": "事前统计", "B": "事前分析估算", "C": "事后统计", "D": "事后分析估算"}, "label": "ceval"}
{"question": "假定AB为一个类，r2是AB类的对象，执行“AB r1=3;”时将自动调用该类的____", "answer": "A", "options": {"A": "带一个整型参数的构造函数", "B": "无参构造函数", "C": "赋值运算符重载函数", "D": "拷贝构造函数"}, "label": "ceval"}
{"question": "下列排序算法中，元素的移动次数与关键字的初始排列次序无关的是____", "answer": "C", "options": {"A": "直接插入排序", "B": "冒泡排序", "C": "基数排序", "D": "快速排序"}, "label": "ceval"}
{"question": "线性链表不具有的特点是____。", "answer": "A", "options": {"A": "随机访问", "B": "不必事先估计所需存储空间大小", "C": "插入与删除时不必移动元素", "D": "所需空间与线性表长度成正比"}, "label": "ceval"}
{"question": "设有一个递归算法如下：\nint fact(int n){\nif(n<=0)return 1;\nelse return n*fact(n-1);\n}\n下面正确的叙述是____", "answer": "B", "options": {"A": "计算fact(n)需要执行n次递归", "B": "fact(7)=5040", "C": "此递归算法最多只能计算到fact(8)", "D": "以上结论都不对"}, "label": "ceval"}
{"question": "在C++中，一个函数为void f(int=1,char='a'),另一个函数为void f(int),则它们____。", "answer": "B", "options": {"A": "不能在同一程序中定义", "B": "可以在同一程序中定义并可重载", "C": "可以在同一程序中定义，但不可重载", "D": "以上说法都不正确"}, "label": "ceval"}
{"question": "已知一个有向图的邻接矩阵表示，要删除所有从第i个结点发出的边，应____。", "answer": "B", "options": {"A": "将邻接矩阵的第i行删除", "B": "将邻接矩阵的第i行元素全部置为0", "C": "将邻接矩阵的第i列删除", "D": "将邻接矩阵的第i列元素全部置为0"}, "label": "ceval"}
{"question": "—组关键字序列A(12,14,3,16,8,7,10,17,5,11,9,6,13,15,4),为排成递增序利用堆排序的方法建立的初始的堆为____", "answer": "D", "options": {"A": "（ 3， 4， 5, 8， 9， 7, 6, 17， 16， 14， 11， 12， 13， 15， 10 )", "B": "( 3， 5, 4, 8, 9， 7, 6， 17， 16， 14, 11， 12, 13， 15， 10 )", "C": "( 17, 16, 15, 14, 11, 13, 10, 12, 5, 8, 9, 6, 7， 3， 4 )", "D": "( 17, 16, 14, 15, 11, 13, 10, 12, 5, 8, 9, 6, 7, 3, 4 )"}, "label": "ceval"}
{"question": "若一个线性表中最常用的操作是取第1个元素和我第1个元素的前趋元素，则采用____存储方式最节省时间。", "answer": "A", "options": {"A": "顺序表", "B": "单链表", "C": "双链表", "D": "单循环链表"}, "label": "ceval"}
